// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoTest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ProtoTest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ProtoTest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ProtoTest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ProtoTest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ProtoTest_2eproto;
namespace Protocol {
class EchoTest;
struct EchoTestDefaultTypeInternal;
extern EchoTestDefaultTypeInternal _EchoTest_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::EchoTest* Arena::CreateMaybeMessage<::Protocol::EchoTest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

enum INGAME : int {
  NULL_ = 0,
  ECHO = 1,
  COUNT = 2,
  INGAME_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  INGAME_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool INGAME_IsValid(int value);
constexpr INGAME INGAME_MIN = NULL_;
constexpr INGAME INGAME_MAX = COUNT;
constexpr int INGAME_ARRAYSIZE = INGAME_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* INGAME_descriptor();
template<typename T>
inline const std::string& INGAME_Name(T enum_t_value) {
  static_assert(::std::is_same<T, INGAME>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function INGAME_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    INGAME_descriptor(), enum_t_value);
}
inline bool INGAME_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, INGAME* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<INGAME>(
    INGAME_descriptor(), name, value);
}
// ===================================================================

class EchoTest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.EchoTest) */ {
 public:
  inline EchoTest() : EchoTest(nullptr) {}
  ~EchoTest() override;
  explicit constexpr EchoTest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EchoTest(const EchoTest& from);
  EchoTest(EchoTest&& from) noexcept
    : EchoTest() {
    *this = ::std::move(from);
  }

  inline EchoTest& operator=(const EchoTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EchoTest& operator=(EchoTest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EchoTest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EchoTest* internal_default_instance() {
    return reinterpret_cast<const EchoTest*>(
               &_EchoTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EchoTest& a, EchoTest& b) {
    a.Swap(&b);
  }
  inline void Swap(EchoTest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EchoTest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EchoTest* New() const final {
    return new EchoTest();
  }

  EchoTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EchoTest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EchoTest& from);
  void MergeFrom(const EchoTest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EchoTest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.EchoTest";
  }
  protected:
  explicit EchoTest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxtFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string txt = 2;
  void clear_txt();
  const std::string& txt() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_txt(ArgT0&& arg0, ArgT... args);
  std::string* mutable_txt();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_txt();
  void set_allocated_txt(std::string* txt);
  private:
  const std::string& _internal_txt() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_txt(const std::string& value);
  std::string* _internal_mutable_txt();
  public:

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.EchoTest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txt_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProtoTest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EchoTest

// int64 id = 1;
inline void EchoTest::clear_id() {
  id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EchoTest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EchoTest::id() const {
  // @@protoc_insertion_point(field_get:Protocol.EchoTest.id)
  return _internal_id();
}
inline void EchoTest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void EchoTest::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.EchoTest.id)
}

// string txt = 2;
inline void EchoTest::clear_txt() {
  txt_.ClearToEmpty();
}
inline const std::string& EchoTest::txt() const {
  // @@protoc_insertion_point(field_get:Protocol.EchoTest.txt)
  return _internal_txt();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EchoTest::set_txt(ArgT0&& arg0, ArgT... args) {
 
 txt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.EchoTest.txt)
}
inline std::string* EchoTest::mutable_txt() {
  // @@protoc_insertion_point(field_mutable:Protocol.EchoTest.txt)
  return _internal_mutable_txt();
}
inline const std::string& EchoTest::_internal_txt() const {
  return txt_.Get();
}
inline void EchoTest::_internal_set_txt(const std::string& value) {
  
  txt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EchoTest::_internal_mutable_txt() {
  
  return txt_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EchoTest::release_txt() {
  // @@protoc_insertion_point(field_release:Protocol.EchoTest.txt)
  return txt_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EchoTest::set_allocated_txt(std::string* txt) {
  if (txt != nullptr) {
    
  } else {
    
  }
  txt_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txt,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.EchoTest.txt)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Protocol::INGAME> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::INGAME>() {
  return ::Protocol::INGAME_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ProtoTest_2eproto
