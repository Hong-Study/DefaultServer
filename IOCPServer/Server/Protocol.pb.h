// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Protocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto;
namespace Protocol {
class C_INSIDE;
struct C_INSIDEDefaultTypeInternal;
extern C_INSIDEDefaultTypeInternal _C_INSIDE_default_instance_;
class C_OUTSIDE;
struct C_OUTSIDEDefaultTypeInternal;
extern C_OUTSIDEDefaultTypeInternal _C_OUTSIDE_default_instance_;
class C_START;
struct C_STARTDefaultTypeInternal;
extern C_STARTDefaultTypeInternal _C_START_default_instance_;
class S_INSIDE;
struct S_INSIDEDefaultTypeInternal;
extern S_INSIDEDefaultTypeInternal _S_INSIDE_default_instance_;
class S_OUTSIDE;
struct S_OUTSIDEDefaultTypeInternal;
extern S_OUTSIDEDefaultTypeInternal _S_OUTSIDE_default_instance_;
class S_START;
struct S_STARTDefaultTypeInternal;
extern S_STARTDefaultTypeInternal _S_START_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C_INSIDE* Arena::CreateMaybeMessage<::Protocol::C_INSIDE>(Arena*);
template<> ::Protocol::C_OUTSIDE* Arena::CreateMaybeMessage<::Protocol::C_OUTSIDE>(Arena*);
template<> ::Protocol::C_START* Arena::CreateMaybeMessage<::Protocol::C_START>(Arena*);
template<> ::Protocol::S_INSIDE* Arena::CreateMaybeMessage<::Protocol::S_INSIDE>(Arena*);
template<> ::Protocol::S_OUTSIDE* Arena::CreateMaybeMessage<::Protocol::S_OUTSIDE>(Arena*);
template<> ::Protocol::S_START* Arena::CreateMaybeMessage<::Protocol::S_START>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class S_INSIDE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_INSIDE) */ {
 public:
  inline S_INSIDE() : S_INSIDE(nullptr) {}
  ~S_INSIDE() override;
  explicit PROTOBUF_CONSTEXPR S_INSIDE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_INSIDE(const S_INSIDE& from);
  S_INSIDE(S_INSIDE&& from) noexcept
    : S_INSIDE() {
    *this = ::std::move(from);
  }

  inline S_INSIDE& operator=(const S_INSIDE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_INSIDE& operator=(S_INSIDE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_INSIDE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_INSIDE* internal_default_instance() {
    return reinterpret_cast<const S_INSIDE*>(
               &_S_INSIDE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(S_INSIDE& a, S_INSIDE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_INSIDE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_INSIDE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_INSIDE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_INSIDE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_INSIDE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_INSIDE& from) {
    S_INSIDE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_INSIDE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_INSIDE";
  }
  protected:
  explicit S_INSIDE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kYawFieldNumber = 4,
  };
  // int32 x = 1;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 2;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // int32 z = 3;
  void clear_z();
  int32_t z() const;
  void set_z(int32_t value);
  private:
  int32_t _internal_z() const;
  void _internal_set_z(int32_t value);
  public:

  // int32 yaw = 4;
  void clear_yaw();
  int32_t yaw() const;
  void set_yaw(int32_t value);
  private:
  int32_t _internal_yaw() const;
  void _internal_set_yaw(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_INSIDE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t x_;
    int32_t y_;
    int32_t z_;
    int32_t yaw_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_INSIDE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_INSIDE) */ {
 public:
  inline C_INSIDE() : C_INSIDE(nullptr) {}
  ~C_INSIDE() override;
  explicit PROTOBUF_CONSTEXPR C_INSIDE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_INSIDE(const C_INSIDE& from);
  C_INSIDE(C_INSIDE&& from) noexcept
    : C_INSIDE() {
    *this = ::std::move(from);
  }

  inline C_INSIDE& operator=(const C_INSIDE& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_INSIDE& operator=(C_INSIDE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_INSIDE& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_INSIDE* internal_default_instance() {
    return reinterpret_cast<const C_INSIDE*>(
               &_C_INSIDE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(C_INSIDE& a, C_INSIDE& b) {
    a.Swap(&b);
  }
  inline void Swap(C_INSIDE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_INSIDE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_INSIDE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_INSIDE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_INSIDE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_INSIDE& from) {
    C_INSIDE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_INSIDE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_INSIDE";
  }
  protected:
  explicit C_INSIDE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kYawFieldNumber = 4,
  };
  // int32 x = 1;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 2;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // int32 z = 3;
  void clear_z();
  int32_t z() const;
  void set_z(int32_t value);
  private:
  int32_t _internal_z() const;
  void _internal_set_z(int32_t value);
  public:

  // int32 yaw = 4;
  void clear_yaw();
  int32_t yaw() const;
  void set_yaw(int32_t value);
  private:
  int32_t _internal_yaw() const;
  void _internal_set_yaw(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_INSIDE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t x_;
    int32_t y_;
    int32_t z_;
    int32_t yaw_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_OUTSIDE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_OUTSIDE) */ {
 public:
  inline S_OUTSIDE() : S_OUTSIDE(nullptr) {}
  ~S_OUTSIDE() override;
  explicit PROTOBUF_CONSTEXPR S_OUTSIDE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_OUTSIDE(const S_OUTSIDE& from);
  S_OUTSIDE(S_OUTSIDE&& from) noexcept
    : S_OUTSIDE() {
    *this = ::std::move(from);
  }

  inline S_OUTSIDE& operator=(const S_OUTSIDE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_OUTSIDE& operator=(S_OUTSIDE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_OUTSIDE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_OUTSIDE* internal_default_instance() {
    return reinterpret_cast<const S_OUTSIDE*>(
               &_S_OUTSIDE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(S_OUTSIDE& a, S_OUTSIDE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_OUTSIDE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_OUTSIDE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_OUTSIDE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_OUTSIDE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_OUTSIDE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_OUTSIDE& from) {
    S_OUTSIDE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_OUTSIDE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_OUTSIDE";
  }
  protected:
  explicit S_OUTSIDE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
  };
  // int32 x = 1;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_OUTSIDE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t x_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_OUTSIDE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_OUTSIDE) */ {
 public:
  inline C_OUTSIDE() : C_OUTSIDE(nullptr) {}
  ~C_OUTSIDE() override;
  explicit PROTOBUF_CONSTEXPR C_OUTSIDE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_OUTSIDE(const C_OUTSIDE& from);
  C_OUTSIDE(C_OUTSIDE&& from) noexcept
    : C_OUTSIDE() {
    *this = ::std::move(from);
  }

  inline C_OUTSIDE& operator=(const C_OUTSIDE& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_OUTSIDE& operator=(C_OUTSIDE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_OUTSIDE& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_OUTSIDE* internal_default_instance() {
    return reinterpret_cast<const C_OUTSIDE*>(
               &_C_OUTSIDE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(C_OUTSIDE& a, C_OUTSIDE& b) {
    a.Swap(&b);
  }
  inline void Swap(C_OUTSIDE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_OUTSIDE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_OUTSIDE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_OUTSIDE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_OUTSIDE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_OUTSIDE& from) {
    C_OUTSIDE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_OUTSIDE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_OUTSIDE";
  }
  protected:
  explicit C_OUTSIDE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
  };
  // int32 x = 1;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_OUTSIDE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t x_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_START final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_START) */ {
 public:
  inline S_START() : S_START(nullptr) {}
  ~S_START() override;
  explicit PROTOBUF_CONSTEXPR S_START(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_START(const S_START& from);
  S_START(S_START&& from) noexcept
    : S_START() {
    *this = ::std::move(from);
  }

  inline S_START& operator=(const S_START& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_START& operator=(S_START&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_START& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_START* internal_default_instance() {
    return reinterpret_cast<const S_START*>(
               &_S_START_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(S_START& a, S_START& b) {
    a.Swap(&b);
  }
  inline void Swap(S_START* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_START* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_START* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_START>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_START& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_START& from) {
    S_START::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_START* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_START";
  }
  protected:
  explicit S_START(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
  };
  // int32 x = 1;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_START)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t x_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_START final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_START) */ {
 public:
  inline C_START() : C_START(nullptr) {}
  ~C_START() override;
  explicit PROTOBUF_CONSTEXPR C_START(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_START(const C_START& from);
  C_START(C_START&& from) noexcept
    : C_START() {
    *this = ::std::move(from);
  }

  inline C_START& operator=(const C_START& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_START& operator=(C_START&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_START& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_START* internal_default_instance() {
    return reinterpret_cast<const C_START*>(
               &_C_START_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(C_START& a, C_START& b) {
    a.Swap(&b);
  }
  inline void Swap(C_START* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_START* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_START* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_START>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_START& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_START& from) {
    C_START::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_START* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_START";
  }
  protected:
  explicit C_START(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
  };
  // int32 x = 1;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_START)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t x_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// S_INSIDE

// int32 x = 1;
inline void S_INSIDE::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t S_INSIDE::_internal_x() const {
  return _impl_.x_;
}
inline int32_t S_INSIDE::x() const {
  // @@protoc_insertion_point(field_get:Protocol.S_INSIDE.x)
  return _internal_x();
}
inline void S_INSIDE::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void S_INSIDE::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Protocol.S_INSIDE.x)
}

// int32 y = 2;
inline void S_INSIDE::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t S_INSIDE::_internal_y() const {
  return _impl_.y_;
}
inline int32_t S_INSIDE::y() const {
  // @@protoc_insertion_point(field_get:Protocol.S_INSIDE.y)
  return _internal_y();
}
inline void S_INSIDE::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void S_INSIDE::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Protocol.S_INSIDE.y)
}

// int32 z = 3;
inline void S_INSIDE::clear_z() {
  _impl_.z_ = 0;
}
inline int32_t S_INSIDE::_internal_z() const {
  return _impl_.z_;
}
inline int32_t S_INSIDE::z() const {
  // @@protoc_insertion_point(field_get:Protocol.S_INSIDE.z)
  return _internal_z();
}
inline void S_INSIDE::_internal_set_z(int32_t value) {
  
  _impl_.z_ = value;
}
inline void S_INSIDE::set_z(int32_t value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Protocol.S_INSIDE.z)
}

// int32 yaw = 4;
inline void S_INSIDE::clear_yaw() {
  _impl_.yaw_ = 0;
}
inline int32_t S_INSIDE::_internal_yaw() const {
  return _impl_.yaw_;
}
inline int32_t S_INSIDE::yaw() const {
  // @@protoc_insertion_point(field_get:Protocol.S_INSIDE.yaw)
  return _internal_yaw();
}
inline void S_INSIDE::_internal_set_yaw(int32_t value) {
  
  _impl_.yaw_ = value;
}
inline void S_INSIDE::set_yaw(int32_t value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:Protocol.S_INSIDE.yaw)
}

// -------------------------------------------------------------------

// C_INSIDE

// int32 x = 1;
inline void C_INSIDE::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t C_INSIDE::_internal_x() const {
  return _impl_.x_;
}
inline int32_t C_INSIDE::x() const {
  // @@protoc_insertion_point(field_get:Protocol.C_INSIDE.x)
  return _internal_x();
}
inline void C_INSIDE::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void C_INSIDE::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Protocol.C_INSIDE.x)
}

// int32 y = 2;
inline void C_INSIDE::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t C_INSIDE::_internal_y() const {
  return _impl_.y_;
}
inline int32_t C_INSIDE::y() const {
  // @@protoc_insertion_point(field_get:Protocol.C_INSIDE.y)
  return _internal_y();
}
inline void C_INSIDE::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void C_INSIDE::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Protocol.C_INSIDE.y)
}

// int32 z = 3;
inline void C_INSIDE::clear_z() {
  _impl_.z_ = 0;
}
inline int32_t C_INSIDE::_internal_z() const {
  return _impl_.z_;
}
inline int32_t C_INSIDE::z() const {
  // @@protoc_insertion_point(field_get:Protocol.C_INSIDE.z)
  return _internal_z();
}
inline void C_INSIDE::_internal_set_z(int32_t value) {
  
  _impl_.z_ = value;
}
inline void C_INSIDE::set_z(int32_t value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Protocol.C_INSIDE.z)
}

// int32 yaw = 4;
inline void C_INSIDE::clear_yaw() {
  _impl_.yaw_ = 0;
}
inline int32_t C_INSIDE::_internal_yaw() const {
  return _impl_.yaw_;
}
inline int32_t C_INSIDE::yaw() const {
  // @@protoc_insertion_point(field_get:Protocol.C_INSIDE.yaw)
  return _internal_yaw();
}
inline void C_INSIDE::_internal_set_yaw(int32_t value) {
  
  _impl_.yaw_ = value;
}
inline void C_INSIDE::set_yaw(int32_t value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:Protocol.C_INSIDE.yaw)
}

// -------------------------------------------------------------------

// S_OUTSIDE

// int32 x = 1;
inline void S_OUTSIDE::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t S_OUTSIDE::_internal_x() const {
  return _impl_.x_;
}
inline int32_t S_OUTSIDE::x() const {
  // @@protoc_insertion_point(field_get:Protocol.S_OUTSIDE.x)
  return _internal_x();
}
inline void S_OUTSIDE::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void S_OUTSIDE::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Protocol.S_OUTSIDE.x)
}

// -------------------------------------------------------------------

// C_OUTSIDE

// int32 x = 1;
inline void C_OUTSIDE::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t C_OUTSIDE::_internal_x() const {
  return _impl_.x_;
}
inline int32_t C_OUTSIDE::x() const {
  // @@protoc_insertion_point(field_get:Protocol.C_OUTSIDE.x)
  return _internal_x();
}
inline void C_OUTSIDE::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void C_OUTSIDE::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Protocol.C_OUTSIDE.x)
}

// -------------------------------------------------------------------

// S_START

// int32 x = 1;
inline void S_START::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t S_START::_internal_x() const {
  return _impl_.x_;
}
inline int32_t S_START::x() const {
  // @@protoc_insertion_point(field_get:Protocol.S_START.x)
  return _internal_x();
}
inline void S_START::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void S_START::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Protocol.S_START.x)
}

// -------------------------------------------------------------------

// C_START

// int32 x = 1;
inline void C_START::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t C_START::_internal_x() const {
  return _impl_.x_;
}
inline int32_t C_START::x() const {
  // @@protoc_insertion_point(field_get:Protocol.C_START.x)
  return _internal_x();
}
inline void C_START::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void C_START::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Protocol.C_START.x)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
